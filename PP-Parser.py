#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import datetime
import time
import os
import re
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, simpledialog
import subprocess
import threading
import socket
from urllib.parse import urlencode, quote_plus
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import platform
import json
import sys

def get_data_path(filename):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    if getattr(sys, 'frozen', False):
        # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É —Å exe
        base_path = os.path.dirname(sys.executable)
    else:
        # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
        base_path = os.path.dirname(os.path.abspath(__file__))
    
    return os.path.join(base_path, filename)

BASE_URL_SPEED = "https://servicedesk.service-online.live/traders-speed"
BASE_URL_ADS = "https://servicedesk.service-online.live/trader/ads"
BASE_URL_CONVERSION = "https://servicedesk.service-online.live/trader-conversions"
BASE_URL_DEALS = "https://servicedesk.service-online.live/trader/deals"
BASE_URL_BANK_STATEMENTS = "https://servicedesk.service-online.live/trader/bank-statements"
LINES_PER_PAGE = 20
DEBUGGING_PORT = 9222

def load_service_providers():
    try:
        file_path = get_data_path("service_providers.txt")
        
        if not os.path.exists(file_path):
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write("# Service Providers list\n")
            return {}
        
        providers = {}
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and '|' in line and not line.startswith('#'):
                    sp_id, sp_name = line.split('|', 1)
                    providers[int(sp_id.strip())] = sp_name.strip()
        
        return providers
        
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –°–ü: {str(e)}")
        return {}

SERVICE_PROVIDERS = load_service_providers()

def load_employee_groups():
    try:
        file_path = get_data_path("employee_groups.json")
        
        if not os.path.exists(file_path):
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_groups = {
                "–ü–æ–º–∞–∑-–ë—Ä–∞—Ç–∞—à-–†–∞–¥–∏–æ–Ω–æ–≤–∞-–ñ—É—Ä–∞–≤—Å–∫–∏–π": [687, 612, 827, 963, 711, 767, 734, 768, 684, 239, 80, 81, 278, 910, 126, 964, 501, 314, 583, 956, 352, 947, 975, 337],
                "–°–∞–∑—ã–∫–∏–Ω–∞-–ö–∞–º–µ–Ω–µ–≤–∞-–†–∞–¥–∏–æ–Ω–æ–≤–∞-–ñ—É—Ä–∞–≤—Å–∫–∏–π": [315, 790, 894, 381, 976, 922, 778, 844, 949, 944, 659, 857, 376, 686, 801, 364, 593, 979],
                "–ü–µ—Ä–µ—Ç—Ä—É—Ö–∏–Ω-–¶—ã–≥–∞–Ω–∫–æ–≤-–ú–∞–º–µ–¥–æ–≤-–†—è–±–µ–Ω–∫–æ–≤–∞": [855, 742, 493, 376, 737, 552, 897, 394, 810, 784, 858, 785, 952, 924, 656, 972, 921, 966],
                "–¢–∞–ª–≥–∞—Ç-–Æ—Ö–Ω–æ–≤–µ—Ü-–ú–∞–º–µ–¥–æ–≤-–ë–æ–ª–æ—Ç–æ–≤": [898, 893, 899, 550, 737, 920, 833, 722, 806, 530, 800, 745, 888]
            }
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(default_groups, f, ensure_ascii=False, indent=2)
            return default_groups
        
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
            
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {str(e)}")
        return {}

def save_employee_groups(groups):
    try:
        file_path = get_data_path("employee_groups.json")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(groups, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {str(e)}")
        return False

EMPLOYEE_GROUPS = load_employee_groups()

def is_chrome_ready(port=DEBUGGING_PORT, host='127.0.0.1', timeout=1):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except:
        return False

def get_or_connect_chrome():
    if not is_chrome_ready():
        return None
    
    chrome_options = Options()
    chrome_options.add_experimental_option("debuggerAddress", f"127.0.0.1:{DEBUGGING_PORT}")
    
    try:
        driver = webdriver.Chrome(options=chrome_options)
        driver.current_url
        return driver
    except:
        return None

def open_folder(path):
    try:
        if platform.system() == "Windows":
            os.startfile(path)
        elif platform.system() == "Darwin":
            subprocess.Popen(["open", path])
        else:
            subprocess.Popen(["xdg-open", path])
        return True
    except:
        return False

def find_sp_in_table(soup, sp_name):
    table = soup.find('table')
    if not table:
        return sp_name
    
    all_text = table.get_text()
    
    for name_part in sp_name.split('|'):
        name_part = name_part.strip()
        if name_part and name_part in all_text:
            return name_part
    
    return sp_name

def find_total_row(rows, sp_name, actual_sp_name):
    total_patterns = [
        f"Total ({actual_sp_name})",
        f"Total ({sp_name})",
    ]
    
    for row in rows:
        cells = row.find_all(['td', 'th'])
        cell_texts = [cell.get_text(strip=True) for cell in cells]
        
        for pattern in total_patterns:
            if pattern in cell_texts:
                return cells
    return None

def create_deal_data(cells):
    invoice_element = cells[1].find('a')
    return {
        'id': cells[0].get_text(strip=True),
        'invoice': invoice_element.get_text(strip=True) if invoice_element else "N/A",
        'trader': cells[3].get_text(strip=True),
        'amount': cells[7].get_text(strip=True),
        'currency': cells[4].get_text(strip=True),
        'payment_system': cells[8].get_text(strip=True),
        'type': cells[9].get_text(strip=True),
        'status': cells[15].get_text(strip=True) if len(cells) > 15 else "Pending Arbitration",
        'created_at': cells[18].get_text(strip=True) if len(cells) > 18 else ""
    }

class ModernSPFrame(ttk.Frame):
    def __init__(self, parent, sp_vars, log_callback):
        super().__init__(parent)
        self.sp_vars = sp_vars
        self.log_callback = log_callback
        self.all_sp_ids = list(SERVICE_PROVIDERS.keys())
        self.filtered_sp_ids = self.all_sp_ids.copy()
        
        self.name_filter_var = tk.StringVar()
        self.employee_group_var = tk.StringVar(value="–í—Å–µ –≥—Ä—É–ø–ø—ã")
        
        self.filter_update_job = None
        
        self.setup_ui()
        self.setup_filter_bindings()
    
    def setup_ui(self):
        main_container = ttk.Frame(self)
        main_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        filter_frame = ttk.LabelFrame(main_container, text="üîç –§–∏–ª—å—Ç—Ä—ã", padding=10)
        filter_frame.pack(fill=tk.X, pady=(0, 10))
        
        filter_row = ttk.Frame(filter_frame)
        filter_row.pack(fill=tk.X, pady=5)
        
        ttk.Label(filter_row, text="–ü–æ–∏—Å–∫:").pack(side=tk.LEFT, padx=(0, 5))
        self.name_entry = ttk.Entry(filter_row, textvariable=self.name_filter_var, width=20)
        self.name_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Label(filter_row, text="–ì—Ä—É–ø–ø–∞:").pack(side=tk.LEFT, padx=(0, 5))
        employee_groups = ["–í—Å–µ –≥—Ä—É–ø–ø—ã"] + list(EMPLOYEE_GROUPS.keys())
        self.employee_combo = ttk.Combobox(filter_row, textvariable=self.employee_group_var, 
                                     values=employee_groups, width=20, state="readonly")
        self.employee_combo.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(filter_row, text="üßπ –°–±—Ä–æ—Å–∏—Ç—å", 
                  command=self.clear_filters).pack(side=tk.LEFT, padx=(0, 10))
        
        control_frame = ttk.Frame(main_container)
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(control_frame, text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", 
                  command=self.select_all).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(control_frame, text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ", 
                  command=self.deselect_all).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(control_frame, text="‚≠ê –í—ã–±—Ä–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ", 
                  command=self.select_filtered).pack(side=tk.LEFT, padx=(0, 5))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –°–ü –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        self.filter_info_var = tk.StringVar(value=f"–í—Å–µ–≥–æ –°–ü: {len(self.all_sp_ids)}")
        ttk.Label(control_frame, textvariable=self.filter_info_var, 
                 font=("Arial", 9, "bold")).pack(side=tk.RIGHT, padx=(0, 10))
        
        sp_display_frame = ttk.LabelFrame(main_container, text="Service Providers", padding=5)
        sp_display_frame.pack(fill=tk.BOTH, expand=True)
        
        self.setup_sp_treeview(sp_display_frame)
    
    def setup_filter_bindings(self):
        self.name_entry.bind('<KeyRelease>', self.schedule_filter_update)
        self.employee_combo.bind('<<ComboboxSelected>>', self.schedule_filter_update)
    
    def setup_sp_treeview(self, parent):
        tree_frame = ttk.Frame(parent)
        tree_frame.pack(fill=tk.BOTH, expand=True)
        
        columns = ("selected", "id", "name", "group")
        self.tree = ttk.Treeview(tree_frame, columns=columns, show="tree headings", height=12)
        
        self.tree.heading("selected", text="‚úÖ")
        self.tree.heading("id", text="ID")
        self.tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ –°–ü")
        self.tree.heading("group", text="–ì—Ä—É–ø–ø–∞")
        
        self.tree.column("selected", width=60, anchor="center")
        self.tree.column("id", width=50, anchor="center")
        self.tree.column("name", width=250, anchor="w")
        self.tree.column("group", width=150, anchor="w")
        
        v_scroll = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.tree.yview)
        h_scroll = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scroll.set, xscrollcommand=h_scroll.set)
        
        self.tree.grid(row=0, column=0, sticky="nsew")
        v_scroll.grid(row=0, column=1, sticky="ns")
        h_scroll.grid(row=1, column=0, sticky="ew")
        
        tree_frame.grid_rowconfigure(0, weight=1)
        tree_frame.grid_columnconfigure(0, weight=1)
        
        self.tree.bind('<Button-1>', self.on_tree_click)
        
        self.refresh_tree()
    
    def get_sp_group(self, sp_id):
        # –ò—â–µ–º –°–ü –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö
        for group, sp_ids in EMPLOYEE_GROUPS.items():
            if sp_id in sp_ids:
                return group
        return "–ù–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω"
    
    def should_show_sp(self, sp_id, sp_name, filters):
        name_match = not filters['name'] or filters['name'] in sp_name.lower()
        
        group_match = True
        if filters['employee_group'] != "–í—Å–µ –≥—Ä—É–ø–ø—ã":
            sp_group = self.get_sp_group(sp_id)
            group_match = sp_group == filters['employee_group']
        
        return all([name_match, group_match])
    
    def refresh_tree(self):
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        filters = {
            'name': self.name_filter_var.get().lower().strip(),
            'employee_group': self.employee_group_var.get()
        }
        
        self.filtered_sp_ids = []
        visible_count = 0
        selected_count = 0
        
        for sp_id, sp_name in SERVICE_PROVIDERS.items():
            should_show = self.should_show_sp(sp_id, sp_name, filters)
            is_selected = self.sp_vars[sp_id].get()
            
            if is_selected:
                selected_count += 1
            
            if should_show:
                group = self.get_sp_group(sp_id)
                selected_mark = "‚úÖ –í–´–ë–†–ê–ù" if is_selected else "‚òê –í—ã–±—Ä–∞—Ç—å"
                self.tree.insert("", "end", iid=str(sp_id), 
                               values=(selected_mark, sp_id, sp_name, group))
                self.filtered_sp_ids.append(sp_id)
                visible_count += 1
        
        self.filter_info_var.set(f"–ü–æ–∫–∞–∑–∞–Ω–æ: {visible_count} –∏–∑ {len(self.all_sp_ids)} | –í—ã–±—Ä–∞–Ω–æ: {selected_count}")
        
        if visible_count == 0:
            self.log_callback("‚ÑπÔ∏è –ù–µ—Ç –°–ü, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")
    
    def update_tree_item(self, item_id, is_selected):
        if self.tree.exists(str(item_id)):
            selected_mark = "‚úÖ –í–´–ë–†–ê–ù" if is_selected else "‚òê –í—ã–±—Ä–∞—Ç—å"
            values = self.tree.item(str(item_id))['values']
            self.tree.item(str(item_id), values=(selected_mark, values[1], values[2], values[3]))
    
    def on_tree_click(self, event):
        item = self.tree.identify_row(event.y)
        
        if item:
            sp_id = int(item)
            current_state = self.sp_vars[sp_id].get()
            self.sp_vars[sp_id].set(not current_state)
            self.update_tree_item(sp_id, not current_state)
            self.update_selection_counter()
    
    def update_selection_counter(self):
        selected_count = sum(1 for var in self.sp_vars.values() if var.get())
        visible_count = len(self.filtered_sp_ids)
        self.filter_info_var.set(f"–ü–æ–∫–∞–∑–∞–Ω–æ: {visible_count} –∏–∑ {len(self.all_sp_ids)} | –í—ã–±—Ä–∞–Ω–æ: {selected_count}")
    
    def schedule_filter_update(self, event=None):
        if self.filter_update_job:
            self.after_cancel(self.filter_update_job)
        self.filter_update_job = self.after(300, self.refresh_tree)
    
    def clear_filters(self):
        self.name_filter_var.set("")
        self.employee_group_var.set("–í—Å–µ –≥—Ä—É–ø–ø—ã")
        self.refresh_tree()
        self.log_callback("üßπ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def select_all(self):
        for var in self.sp_vars.values():
            var.set(True)
        self.refresh_tree()
        self.log_callback("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –°–ü")
    
    def deselect_all(self):
        for var in self.sp_vars.values():
            var.set(False)
        self.refresh_tree()
        self.log_callback("‚ùå –í—ã–±–æ—Ä —Å–Ω—è—Ç —Å–æ –≤—Å–µ—Ö –°–ü")
    
    def select_filtered(self):
        for var in self.sp_vars.values():
            var.set(False)
        
        for sp_id in self.filtered_sp_ids:
            self.sp_vars[sp_id].set(True)
        
        self.refresh_tree()
        self.log_callback(f"‚≠ê –í—ã–±—Ä–∞–Ω—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –°–ü: {len(self.filtered_sp_ids)}")
    
    def update_service_providers(self, new_service_providers, new_sp_vars):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –°–ü –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        self.sp_vars = new_sp_vars
        self.all_sp_ids = list(new_service_providers.keys())
        self.filtered_sp_ids = self.all_sp_ids.copy()
        self.refresh_tree()
        self.log_callback(f"üîÑ –°–ø–∏—Å–æ–∫ –°–ü –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.all_sp_ids)} providers")
    
    def refresh_groups_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è –≤—Å–µ—Ö –°–ü"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ —Ñ–∏–ª—å—Ç—Ä–∞
        employee_groups = ["–í—Å–µ –≥—Ä—É–ø–ø—ã"] + list(EMPLOYEE_GROUPS.keys())
        self.employee_combo['values'] = employee_groups
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
        self.refresh_tree()

class TimeFrame(ttk.LabelFrame):
    def __init__(self, parent, log_callback):
        super().__init__(parent, text="üïí –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏", padding=10)
        self.log_callback = log_callback
        
        now = datetime.datetime.now()
        
        self.speed_from_var = tk.StringVar(value=self.calculate_from_time(now, 'speed').strftime("%Y-%m-%d %H:%M:%S"))
        self.speed_to_var = tk.StringVar(value="")
        self.conversion_from_var = tk.StringVar(value=self.calculate_from_time(now, 'conversion').strftime("%Y-%m-%d %H:%M:%S"))
        self.conversion_to_var = tk.StringVar(value="")
        self.arbitrage_from_var = tk.StringVar(value=self.calculate_from_time(now, 'arbitrage').strftime("%Y-%m-%d %H:%M:%S"))
        self.arbitrage_to_var = tk.StringVar(value="")
        
        self.setup_ui()
    
    def calculate_from_time(self, now: datetime.datetime, time_type: str) -> datetime.datetime:
        if time_type == 'arbitrage':
            return (now - datetime.timedelta(days=7)).replace(hour=0, minute=0, second=0, microsecond=0)
        
        if now.hour < 3:
            return (now - datetime.timedelta(days=1)).replace(hour=15, minute=0, second=0, microsecond=0)
        elif now.hour < 8:
            return (now - datetime.timedelta(days=1)).replace(hour=17, minute=0, second=0, microsecond=0)
        elif now.hour < 20:
            return now.replace(hour=0, minute=0, second=0, microsecond=0)
        else:
            return now.replace(hour=15, minute=0, second=0, microsecond=0)
    
    def setup_ui(self):
        time_grid = ttk.Frame(self)
        time_grid.pack(fill=tk.X)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        ttk.Label(time_grid, text="", width=8).grid(row=0, column=0, padx=2, pady=2)
        ttk.Label(time_grid, text="–û—Ç", width=15).grid(row=0, column=1, padx=2, pady=2)
        ttk.Label(time_grid, text="–î–æ", width=15).grid(row=0, column=2, padx=2, pady=2)
        ttk.Label(time_grid, text="", width=10).grid(row=0, column=3, padx=2, pady=2)  # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        
        # –°–∫–æ—Ä–æ—Å—Ç—å
        ttk.Label(time_grid, text="–°–∫–æ—Ä–æ—Å—Ç—å:").grid(row=1, column=0, padx=2, pady=2, sticky=tk.W)
        ttk.Entry(time_grid, textvariable=self.speed_from_var, width=15).grid(row=1, column=1, padx=2, pady=2)
        ttk.Entry(time_grid, textvariable=self.speed_to_var, width=15).grid(row=1, column=2, padx=2, pady=2)
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
        ttk.Label(time_grid, text="–ö–æ–Ω–≤–µ—Ä—Å–∏—è:").grid(row=2, column=0, padx=2, pady=2, sticky=tk.W)
        ttk.Entry(time_grid, textvariable=self.conversion_from_var, width=15).grid(row=2, column=1, padx=2, pady=2)
        ttk.Entry(time_grid, textvariable=self.conversion_to_var, width=15).grid(row=2, column=2, padx=2, pady=2)
        
        # –ê—Ä–±–∏—Ç—Ä–∞–∂–∏
        ttk.Label(time_grid, text="–ê—Ä–±–∏—Ç—Ä–∞–∂–∏:").grid(row=3, column=0, padx=2, pady=2, sticky=tk.W)
        ttk.Entry(time_grid, textvariable=self.arbitrage_from_var, width=15).grid(row=3, column=1, padx=2, pady=2)
        ttk.Entry(time_grid, textvariable=self.arbitrage_to_var, width=15).grid(row=3, column=2, padx=2, pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º - —Ç–µ–ø–µ—Ä—å –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ —á—Ç–æ –∏ –ø–æ–ª—è
        button_frame = ttk.Frame(time_grid)
        button_frame.grid(row=1, column=3, rowspan=3, padx=10, pady=2, sticky=tk.N)
        
        ttk.Button(button_frame, text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è", command=self.reset_time).pack(side=tk.TOP, pady=(0, 5))
        ttk.Button(button_frame, text="‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", command=self.set_current_time).pack(side=tk.TOP)
    
    def reset_time(self):
        now = datetime.datetime.now()
        
        self.speed_from_var.set(self.calculate_from_time(now, 'speed').strftime("%Y-%m-%d %H:%M:%S"))
        self.speed_to_var.set("")
        self.conversion_from_var.set(self.calculate_from_time(now, 'conversion').strftime("%Y-%m-%d %H:%M:%S"))
        self.conversion_to_var.set("")
        self.arbitrage_from_var.set(self.calculate_from_time(now, 'arbitrage').strftime("%Y-%m-%d %H:%M:%S"))
        self.arbitrage_to_var.set("")
        
        self.log_callback("üïí –í—Ä–µ–º—è —Å–±—Ä–æ—à–µ–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
    
    def set_current_time(self):
        now = datetime.datetime.now()
        current_time = now.strftime("%Y-%m-%d %H:%M:%S")
        
        if not self.speed_to_var.get():
            self.speed_to_var.set(current_time)
        if not self.conversion_to_var.get():
            self.conversion_to_var.set(current_time)
        if not self.arbitrage_to_var.get():
            self.arbitrage_to_var.set(current_time)
        
        self.log_callback(f"‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")

class GroupManagementFrame(ttk.LabelFrame):
    def __init__(self, parent, log_callback, main_app):
        super().__init__(parent, text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏", padding=10)
        self.log_callback = log_callback
        self.main_app = main_app
        self.setup_ui()
    
    def setup_ui(self):
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø–∞–º–∏
        group_control_frame = ttk.Frame(self)
        group_control_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(group_control_frame, text="–ì—Ä—É–ø–ø–∞:").pack(side=tk.LEFT, padx=(0, 5))
        self.group_var = tk.StringVar()
        self.group_combo = ttk.Combobox(group_control_frame, textvariable=self.group_var, 
                                       values=list(EMPLOYEE_GROUPS.keys()), width=25, state="readonly")
        self.group_combo.pack(side=tk.LEFT, padx=(0, 10))
        self.group_combo.bind('<<ComboboxSelected>>', self.on_group_selected)
        
        ttk.Button(group_control_frame, text="‚ûï –ù–æ–≤–∞—è", 
                  command=self.add_new_group).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(group_control_frame, text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º.", 
                  command=self.rename_group).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(group_control_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                  command=self.delete_group).pack(side=tk.LEFT, padx=(0, 5))
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°–ü –≤ –≥—Ä—É–ø–ø–µ
        sp_management_frame = ttk.Frame(self)
        sp_management_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(sp_management_frame, text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É", 
                  command=self.assign_selected_to_group).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(sp_management_frame, text="üßπ –£–±—Ä–∞—Ç—å –∏–∑ –≥—Ä—É–ø–ø", 
                  command=self.remove_from_all_groups).pack(side=tk.LEFT, padx=(0, 10))
    
    def on_group_selected(self, event=None):
        pass
    
    def add_new_group(self):
        new_name = simpledialog.askstring("–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:")
        if not new_name:
            return
        
        new_name = new_name.strip()
        if not new_name:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        if new_name in EMPLOYEE_GROUPS:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        EMPLOYEE_GROUPS[new_name] = []
        if save_employee_groups(EMPLOYEE_GROUPS):
            self.group_combo['values'] = list(EMPLOYEE_GROUPS.keys())
            self.group_var.set(new_name)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            self.main_app.sp_frame.refresh_groups_display()
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
            self.main_app.sp_frame.refresh_tree()
            self.log_callback(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {new_name}")
    
    def rename_group(self):
        old_name = self.group_var.get()
        if not old_name:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è!")
            return
        
        new_name = simpledialog.askstring("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", 
                                         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã '{old_name}':",
                                         initialvalue=old_name)
        if not new_name:
            return
        
        new_name = new_name.strip()
        if not new_name:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        if new_name in EMPLOYEE_GROUPS:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        EMPLOYEE_GROUPS[new_name] = EMPLOYEE_GROUPS.pop(old_name)
        if save_employee_groups(EMPLOYEE_GROUPS):
            self.group_combo['values'] = list(EMPLOYEE_GROUPS.keys())
            self.group_var.set(new_name)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            self.main_app.sp_frame.refresh_groups_display()
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
            self.main_app.sp_frame.refresh_tree()
            self.log_callback(f"‚úèÔ∏è –ì—Ä—É–ø–ø–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_name} -> {new_name}")
    
    def delete_group(self):
        group_name = self.group_var.get()
        if not group_name:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '{group_name}'?")
        if not result:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –°–ü –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ª–æ–≥–∞
        sp_count = len(EMPLOYEE_GROUPS[group_name])
        
        del EMPLOYEE_GROUPS[group_name]
        if save_employee_groups(EMPLOYEE_GROUPS):
            self.group_combo['values'] = list(EMPLOYEE_GROUPS.keys())
            self.group_var.set("")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            self.main_app.sp_frame.refresh_groups_display()
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
            self.main_app.sp_frame.refresh_tree()
            self.log_callback(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ '{group_name}' —Å {sp_count} –°–ü")
    
    def assign_selected_to_group(self):
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –°–ü –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É (—É–¥–∞–ª—è—è –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø)"""
        group_name = self.group_var.get()
        if not group_name:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!")
            return
        
        if self.main_app and hasattr(self.main_app, 'get_selected_sps'):
            selected_sps = self.main_app.get_selected_sps()
            if not selected_sps:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –°–ü!")
                return
            
            assigned_count = 0
            moved_count = 0
            
            for sp_id in selected_sps.keys():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Å–µ–π—á–∞—Å –°–ü
                current_group = None
                for group, sp_ids in EMPLOYEE_GROUPS.items():
                    if sp_id in sp_ids:
                        current_group = group
                        break
                
                # –£–¥–∞–ª—è–µ–º –°–ü –∏–∑ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø
                for other_group_name, sp_ids in EMPLOYEE_GROUPS.items():
                    if other_group_name != group_name and sp_id in sp_ids:
                        EMPLOYEE_GROUPS[other_group_name].remove(sp_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –°–ü –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
                if sp_id not in EMPLOYEE_GROUPS[group_name]:
                    EMPLOYEE_GROUPS[group_name].append(sp_id)
                    if current_group and current_group != group_name:
                        moved_count += 1
                    else:
                        assigned_count += 1
            
            # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if save_employee_groups(EMPLOYEE_GROUPS):
                # –û–ë–ù–û–í–õ–Ø–ï–ú –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ì–†–£–ü–ü –í –û–°–ù–û–í–ù–û–ú –ò–ù–¢–ï–†–§–ï–ô–°–ï
                self.main_app.sp_frame.refresh_groups_display()
                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –î–ï–†–ï–í–û
                self.main_app.sp_frame.refresh_tree()
                
                message_parts = []
                if assigned_count > 0:
                    message_parts.append(f"–¥–æ–±–∞–≤–ª–µ–Ω–æ {assigned_count}")
                if moved_count > 0:
                    message_parts.append(f"–ø–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count}")
                
                if assigned_count > 0 or moved_count > 0:
                    self.log_callback(f"‚úÖ {', '.join(message_parts)} –°–ü –≤ –≥—Ä—É–ø–ø—É '{group_name}'")
                else:
                    self.log_callback(f"‚ÑπÔ∏è –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –°–ü —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ '{group_name}'")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –°–ü!")
    
    def remove_from_all_groups(self):
        """–£–±—Ä–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –°–ü –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
        if self.main_app and hasattr(self.main_app, 'get_selected_sps'):
            selected_sps = self.main_app.get_selected_sps()
            if not selected_sps:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –°–ü!")
                return
            
            removed_count = 0
            
            for sp_id in selected_sps.keys():
                # –£–¥–∞–ª—è–µ–º –°–ü –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
                for group_name, sp_ids in EMPLOYEE_GROUPS.items():
                    if sp_id in sp_ids:
                        EMPLOYEE_GROUPS[group_name].remove(sp_id)
                        removed_count += 1
            
            # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if save_employee_groups(EMPLOYEE_GROUPS):
                # –û–ë–ù–û–í–õ–Ø–ï–ú –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ì–†–£–ü–ü –í –û–°–ù–û–í–ù–û–ú –ò–ù–¢–ï–†–§–ï–ô–°–ï
                self.main_app.sp_frame.refresh_groups_display()
                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –î–ï–†–ï–í–û
                self.main_app.sp_frame.refresh_tree()
                
                if removed_count > 0:
                    self.log_callback(f"üßπ –£–±—Ä–∞–Ω–æ {removed_count} –°–ü –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø")
                else:
                    self.log_callback("‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ –°–ü –Ω–µ —Å–æ—Å—Ç–æ—è—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –°–ü!")

class PayportApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Payport SP Parser v10.8")
        self.root.geometry("1400x900")
        self.root.minsize(1000, 700)
        
        # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.sp_vars = {sp_id: tk.BooleanVar(value=True) for sp_id in SERVICE_PROVIDERS.keys()}
        self.auto_no_incidents_var = tk.BooleanVar(value=True)
        
        self.stop_processing = False
        self.processing_thread = None
        self.driver = None
        self.chrome_process = None
        self.last_reports_folder = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º log_text –∫–∞–∫ None
        self.log_text = None
        
        self.setup_ui()
        self.setup_sp_management()
    
    def setup_ui(self):
        style = ttk.Style()
        style.configure("TButton", padding=6)
        style.configure("TLabelframe", padding=10)
        style.configure("TLabelframe.Label", font=("Arial", 10, "bold"))
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ PanedWindow
        notebook = ttk.Notebook(main_container)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # –õ–µ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        left_tab = ttk.Frame(notebook)
        notebook.add(left_tab, text="üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        
        # –ü—Ä–∞–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ - –ª–æ–≥–∏
        right_tab = ttk.Frame(notebook)
        notebook.add(right_tab, text="üìù –õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        # –°–ù–ê–ß–ê–õ–ê –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å —Å –ª–æ–≥–∞–º–∏
        self.setup_right_panel(right_tab)
        
        # –ü–û–¢–û–ú –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å
        self.setup_left_panel(left_tab)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        main_container.columnconfigure(0, weight=1)
        main_container.rowconfigure(0, weight=1)
        
    def setup_left_panel(self, parent):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º grid —Å –≤–µ—Å–∞–º–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        parent.columnconfigure(0, weight=1)
        parent.columnconfigure(1, weight=1)
        parent.rowconfigure(0, weight=0)  # –í—Ä–µ–º—è
        parent.rowconfigure(1, weight=0)  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–ü –∏ –≥—Ä—É–ø–ø—ã
        parent.rowconfigure(2, weight=1)  # –°–ü –ø–æ–ª—É—á–∞—é—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤–µ—Å
        parent.rowconfigure(3, weight=0)  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ - –Ω–∞ —Å–∞–º—ã–π –≤–µ—Ä—Ö
        self.time_frame = TimeFrame(parent, self.log)
        self.time_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 10))
        
        # –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°–ü –∏ –≥—Ä—É–ø–ø–∞–º–∏ - —Ä—è–¥–æ–º
        management_frame = ttk.Frame(parent)
        management_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(0, 10))
        management_frame.columnconfigure(0, weight=1)
        management_frame.columnconfigure(1, weight=1)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–ü - —Å–ª–µ–≤–∞
        self.sp_management_frame = ttk.LabelFrame(management_frame, text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–ü", padding=10)
        self.sp_management_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 5))
        self.setup_sp_management_ui()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ - —Å–ø—Ä–∞–≤–∞ (–ü–ï–†–ï–î–ê–ï–ú self –ö–ê–ö main_app)
        self.group_frame = GroupManagementFrame(management_frame, self.log, self)
        self.group_frame.grid(row=0, column=1, sticky="nsew", padx=(5, 0))
        
        # –°–ø–∏—Å–æ–∫ –°–ü - –ø–æ–¥ –±–ª–æ–∫–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.sp_frame = ModernSPFrame(parent, self.sp_vars, self.log)
        self.sp_frame.grid(row=2, column=0, columnspan=2, sticky="nsew", pady=(0, 10))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π - –≤–Ω–∏–∑—É
        control_frame = ttk.LabelFrame(parent, text="üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π", padding=10)
        control_frame.grid(row=3, column=0, columnspan=2, sticky="ew")
        
        settings_frame = ttk.Frame(control_frame)
        settings_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.auto_no_incidents_cb = ttk.Checkbutton(
            settings_frame, 
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å '–ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' –≤ –ø—É–Ω–∫—Ç–µ 6",
            variable=self.auto_no_incidents_var
        )
        self.auto_no_incidents_cb.pack(side=tk.LEFT)
        
        btn_container = ttk.Frame(control_frame)
        btn_container.pack(fill=tk.X)
        
        self.start_button = ttk.Button(btn_container, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏", command=self.start_processing)
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(btn_container, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_processing_command, state="disabled")
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.open_folder_button = ttk.Button(btn_container, text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –æ—Ç—á–µ—Ç–æ–≤", command=self.open_last_reports_folder, state="disabled")
        self.open_folder_button.pack(side=tk.LEFT)
        
        self.progress = ttk.Progressbar(control_frame, mode='determinate')
        self.progress.pack(fill=tk.X, pady=(10, 0))
        
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_label = ttk.Label(control_frame, textvariable=self.status_var, font=("Arial", 9))
        status_label.pack(pady=(5, 0))
    
    def setup_right_panel(self, parent):
        parent.columnconfigure(0, weight=1)
        parent.rowconfigure(0, weight=1)
        
        log_frame = ttk.LabelFrame(parent, text="üìù –õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=10)
        log_frame.grid(row=0, column=0, sticky="nsew")
        
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=20, width=60, font=("Consolas", 9))
        self.log_text.grid(row=0, column=0, sticky="nsew")
        
        log_control = ttk.Frame(log_frame)
        log_control.grid(row=1, column=0, sticky="ew", pady=(5, 0))
        
        ttk.Button(log_control, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", command=self.clear_logs).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(log_control, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", command=self.save_logs).pack(side=tk.LEFT)
    
    def setup_sp_management(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°–ü - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        pass
    
    def setup_sp_management_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°–ü"""
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –°–ü
        input_frame = ttk.Frame(self.sp_management_frame)
        input_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(input_frame, text="ID:").pack(side=tk.LEFT, padx=(0, 5))
        self.new_sp_id_var = tk.StringVar()
        self.new_sp_id_entry = ttk.Entry(input_frame, textvariable=self.new_sp_id_var, width=8)
        self.new_sp_id_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Label(input_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").pack(side=tk.LEFT, padx=(0, 5))
        self.new_sp_name_var = tk.StringVar()
        self.new_sp_name_entry = ttk.Entry(input_frame, textvariable=self.new_sp_name_var, width=30)
        self.new_sp_name_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(self.sp_management_frame)
        btn_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(btn_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –°–ü", command=self.add_service_provider).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", command=self.delete_selected_providers).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", command=self.reload_service_providers).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="üìù –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –°–ü", command=self.open_service_providers_file).pack(side=tk.LEFT)
    
    def add_service_provider(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ Service Provider"""
        sp_id = self.new_sp_id_var.get().strip()
        sp_name = self.new_sp_name_var.get().strip()
        
        if not sp_id or not sp_name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –°–ü!")
            return
        
        try:
            sp_id_int = int(sp_id)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π ID
        if sp_id_int in SERVICE_PROVIDERS:
            result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                       f"–°–ü —Å ID {sp_id_int} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n{SERVICE_PROVIDERS[sp_id_int]}\n–ó–∞–º–µ–Ω–∏—Ç—å?")
            if not result:
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª
        try:
            file_path = get_data_path("service_providers.txt")
            
            with open(file_path, 'a', encoding='utf-8') as f:
                f.write(f"\n{sp_id_int}|{sp_name}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            SERVICE_PROVIDERS[sp_id_int] = sp_name
            self.sp_vars[sp_id_int] = tk.BooleanVar(value=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.sp_frame.update_service_providers(SERVICE_PROVIDERS, self.sp_vars)
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            self.new_sp_id_var.set("")
            self.new_sp_name_var.set("")
            
            self.log(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –°–ü: {sp_name} (ID {sp_id_int})")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –°–ü: {str(e)}")
    
    def delete_selected_providers(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ Service Providers"""
        selected_sps = self.get_selected_sps()
        if not selected_sps:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω Service Provider –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        
        sp_list = "\n".join([f"ID {sp_id}: {sp_name}" for sp_id, sp_name in selected_sps.items()])
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –°–ü?\n\n{sp_list}")
        
        if not result:
            return
        
        try:
            file_path = get_data_path("service_providers.txt")
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –∫—Ä–æ–º–µ —É–¥–∞–ª—è–µ–º—ã—Ö –°–ü
            with open(file_path, 'w', encoding='utf-8') as f:
                for line in lines:
                    line = line.strip()
                    if line and '|' in line:
                        current_id, current_name = line.split('|', 1)
                        current_id = current_id.strip()
                        try:
                            if int(current_id) not in selected_sps:
                                f.write(line + '\n')
                        except ValueError:
                            f.write(line + '\n')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            for sp_id in selected_sps.keys():
                if sp_id in SERVICE_PROVIDERS:
                    del SERVICE_PROVIDERS[sp_id]
                if sp_id in self.sp_vars:
                    del self.sp_vars[sp_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.sp_frame.update_service_providers(SERVICE_PROVIDERS, self.sp_vars)
            
            self.log(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –°–ü: {len(selected_sps)} —à—Ç.")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –°–ü: {str(e)}")
    
    def reload_service_providers(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –°–ü –∏–∑ —Ñ–∞–π–ª–∞"""
        global SERVICE_PROVIDERS
        
        try:
            new_providers = load_service_providers()
            if new_providers is not None:
                SERVICE_PROVIDERS = new_providers
                
                # –û–±–Ω–æ–≤–ª—è–µ–º sp_vars
                self.sp_vars = {sp_id: tk.BooleanVar(value=True) for sp_id in SERVICE_PROVIDERS.keys()}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.sp_frame.update_service_providers(SERVICE_PROVIDERS, self.sp_vars)
                
                self.log("‚úÖ –°–ø–∏—Å–æ–∫ –°–ü –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                self.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –°–ü")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –°–ü: {str(e)}")
    
    def open_service_providers_file(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª service_providers.txt –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            file_path = get_data_path("service_providers.txt")
            
            if platform.system() == "Windows":
                os.startfile(file_path)
            elif platform.system() == "Darwin":
                subprocess.Popen(["open", file_path])
            else:
                subprocess.Popen(["xdg-open", file_path])
                
            self.log("üìù –û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª service_providers.txt –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def open_last_reports_folder(self):
        if self.last_reports_folder and os.path.exists(self.last_reports_folder):
            if open_folder(self.last_reports_folder):
                self.log(f"üìÅ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏: {self.last_reports_folder}")
            else:
                self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {self.last_reports_folder}")
        else:
            # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ REPORTS
            reports_main_folder = "REPORTS"
            if os.path.exists(reports_main_folder):
                reports_folders = [f for f in os.listdir(reports_main_folder) if f.startswith('reports_') and os.path.isdir(os.path.join(reports_main_folder, f))]
                if reports_folders:
                    latest_folder = max(reports_folders, key=lambda x: os.path.getctime(os.path.join(reports_main_folder, x)))
                    latest_folder_path = os.path.join(reports_main_folder, latest_folder)
                    if open_folder(latest_folder_path):
                        self.log(f"üìÅ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏: {latest_folder_path}")
                    else:
                        self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {latest_folder_path}")
                else:
                    messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í –ø–∞–ø–∫–µ REPORTS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç—á–µ—Ç—ã!")
            else:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    def log(self, message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ log_text"""
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}\n"
        
        # –ï—Å–ª–∏ log_text –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        if not hasattr(self, 'log_text') or self.log_text is None:
            print(formatted_message, end='')
            return
        
        try:
            self.log_text.insert(tk.END, formatted_message)
            self.log_text.see(tk.END)
            self.root.update_idletasks()
        except Exception as e:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å log_text, –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ log_text: {e}")
            print(formatted_message, end='')
    
    def clear_logs(self):
        if hasattr(self, 'log_text') and self.log_text:
            self.log_text.delete(1.0, tk.END)
        self.log("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_logs(self):
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ –ø–∞–ø–∫—É —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
            filename = f"logs_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.log_text.get(1.0, tk.END))
            self.log(f"üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")
    
    def get_selected_sps(self):
        return {sp_id: SERVICE_PROVIDERS[sp_id] for sp_id, var in self.sp_vars.items() if var.get()}
    
    def get_time_params(self):
        return {
            'speed': {
                'from_date': self.time_frame.speed_from_var.get(),
                'to_date': self.time_frame.speed_to_var.get()
            },
            'conversion': {
                'from_date': self.time_frame.conversion_from_var.get(),
                'to_date': self.time_frame.conversion_to_var.get()
            },
            'arbitrage': {
                'from_date': self.time_frame.arbitrage_from_var.get(),
                'to_date': self.time_frame.arbitrage_to_var.get()
            }
        }
    
    def start_processing(self):
        if self.processing_thread and self.processing_thread.is_alive():
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return
            
        selected_sps = self.get_selected_sps()
        if not selected_sps:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω Service Provider!")
            return
        
        time_params = self.get_time_params()
        
        try:
            for param_type, params in time_params.items():
                if params['from_date']:
                    datetime.datetime.strptime(params['from_date'], "%Y-%m-%d %H:%M:%S")
                if params['to_date']:
                    datetime.datetime.strptime(params['to_date'], "%Y-%m-%d %H:%M:%S")
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°\n\n–û—à–∏–±–∫–∞: {str(e)}")
            return
        
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(selected_sps)} Service Providers.\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
        if not result:
            return
        
        self.stop_processing = False
        self.start_button.config(state="disabled")
        self.stop_button.config(state="normal")
        self.open_folder_button.config(state="disabled")
        
        self.processing_thread = threading.Thread(target=self.process_sps, args=(selected_sps, time_params))
        self.processing_thread.daemon = True
        self.processing_thread.start()
    
    def stop_processing_command(self):
        self.stop_processing = True
        self.log("üõë –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        self.update_status("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    def update_progress(self, value):
        self.progress['value'] = value
        self.root.update_idletasks()
    
    def update_status(self, status):
        self.status_var.set(status)
        self.root.update_idletasks()
    
    def process_sps(self, selected_sps, time_params):
        try:
            self.log("=" * 60)
            self.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –°–ü")
            self.log(f"üìã –í—ã–±—Ä–∞–Ω–æ –°–ü: {len(selected_sps)}")
            
            if not self.driver:
                self.update_status("–ó–∞–ø—É—Å–∫ Chrome...")
                self.driver, self.chrome_process = self.start_chrome_automatically()
                
                if not self.driver:
                    self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome")
                    self.reset_ui_after_processing()
                    return
                
                self.log("‚úÖ Chrome —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            else:
                self.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–∞—É–∑–µ—Ä")
            
            now = datetime.datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É REPORTS –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            reports_main_folder = "REPORTS"
            os.makedirs(reports_main_folder, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            reports_folder = os.path.join(reports_main_folder, f"reports_{now.strftime('%Y%m%d_%H%M%S')}")
            os.makedirs(reports_folder, exist_ok=True)
            
            original_dir = os.getcwd()
            os.chdir(reports_folder)
            self.last_reports_folder = os.getcwd()
            self.log(f"üìÅ –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: {reports_folder}")
            
            processed_count = 0
            total_count = len(selected_sps)
            
            for i, (sp_id, sp_name) in enumerate(selected_sps.items()):
                if self.stop_processing:
                    self.log("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                    
                try:
                    self.update_status(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {sp_name}... ({i+1}/{total_count})")
                    self.update_progress((i / total_count) * 100)
                    
                    self.log(f"\nüîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {sp_name} (ID {sp_id})")
                    
                    filename = process_single_sp_gui(
                        self.driver, 
                        sp_id, 
                        sp_name, 
                        time_params, 
                        self.log,
                        self.auto_no_incidents_var.get()
                    )
                    
                    processed_count += 1
                    self.log(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {sp_name}")
                    
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {sp_name}: {str(e)}")
                    continue
            
            os.chdir(original_dir)
            
            self.update_progress(100)
            
            if self.stop_processing:
                self.update_status("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                self.log(f"üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{total_count}")
            else:
                self.update_status("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                self.log(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –°–ü: {processed_count}/{total_count}")
                self.log(f"üìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {reports_folder}")
            
        except Exception as e:
            error_message = str(e)
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_message}")
            self.root.after(0, lambda msg=error_message: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{msg}"))
        finally:
            self.reset_ui_after_processing()
    
    def start_chrome_automatically(self):
        try:
            self.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Chrome...")
            driver = get_or_connect_chrome()
            if driver:
                self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Chrome")
                return driver, None

            self.log("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π Chrome...")
            
            chrome_cmd = [
                "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                f"--remote-debugging-port={DEBUGGING_PORT}",
                f"--user-data-dir=C:\\temp\\chrome_debug",
                "--no-first-run",
                "--no-default-browser-check",
                "--disable-extensions",
                "--disable-plugins",
                "--disable-translate"
            ]
            
            self.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Chrome...")
            process = subprocess.Popen(chrome_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            self.log("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ Chrome (–º–∞–∫—Å 15 —Å–µ–∫)...")
            start_time = time.time()
            
            for i in range(30):
                if self.stop_processing:
                    self.log("üõë –ó–∞–ø—É—Å–∫ Chrome –ø—Ä–µ—Ä–≤–∞–Ω")
                    try:
                        process.terminate()
                        process.wait(timeout=2)
                    except:
                        pass
                    return None, None
                
                time.sleep(0.5)
                
                driver = get_or_connect_chrome()
                if driver:
                    elapsed = time.time() - start_time
                    self.log(f"‚úÖ Chrome –∑–∞–ø—É—â–µ–Ω –∑–∞ {elapsed:.1f} —Å–µ–∫")
                    return driver, process
                
                if i % 4 == 0:
                    self.log(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({i//2}/15 —Å–µ–∫)")

            self.log("‚ùå Chrome –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 15 —Å–µ–∫—É–Ω–¥")
            try:
                process.terminate()
                process.wait(timeout=2)
            except:
                pass
            return None, None
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Chrome: {str(e)}")
            return None, None
    
    def reset_ui_after_processing(self):
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
        self.open_folder_button.config(state="normal")
        self.stop_processing = False
        self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.update_progress(0)

def build_speed_url(time_params: dict, sp_ids: list[int]) -> str:
    params = {
        "from_date": time_params['speed']['from_date'],
        "to_date": time_params['speed']['to_date'],
        "lines_per_page": LINES_PER_PAGE,
    }

    query = urlencode(params, quote_via=quote_plus)
    for sp_id in sp_ids:
        query += f"&service_provider_ids[]={sp_id}"

    return f"{BASE_URL_SPEED}?{query}"

def build_ads_url(sp_id: int) -> str:
    params = {
        "service_provider_id[]": sp_id,
        "status[]": 1,
    }
    
    query = urlencode(params, quote_via=quote_plus)
    return f"{BASE_URL_ADS}?{query}"

def build_conversion_url(time_params: dict, sp_ids: list[int]) -> str:
    params = {
        "from_date": time_params['conversion']['from_date'],
        "to_date": time_params['conversion']['to_date'],
        "lines_per_page": LINES_PER_PAGE,
    }

    query = urlencode(params, quote_via=quote_plus)
    for sp_id in sp_ids:
        query += f"&service_provider_ids[]={sp_id}"

    return f"{BASE_URL_CONVERSION}?{query}"

def build_arbitrage_url(time_params: dict, sp_id: int) -> str:
    params = {
        "from_date": time_params['arbitrage']['from_date'],
        "to_date": time_params['arbitrage']['to_date'],
        "fiat_id[]": 3,
        "status[]": 5,
        "service_provider[]": sp_id,
    }
    
    query = urlencode(params, quote_via=quote_plus)
    return f"{BASE_URL_DEALS}?{query}"

def build_bank_statements_url(sp_id: int) -> str:
    params = {
        "service_provider[]": sp_id,
    }
    
    query = urlencode(params, quote_via=quote_plus)
    return f"{BASE_URL_BANK_STATEMENTS}?{query}"

def wait_for_table_loaded(driver, timeout=60):
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            table = WebDriverWait(driver, 1).until(
                EC.presence_of_element_located((By.TAG_NAME, "table"))
            )
            
            rows = table.find_elements(By.TAG_NAME, "tr")
            if len(rows) > 1:
                data_cells = table.find_elements(By.TAG_NAME, "td")
                if len(data_cells) > 0:
                    return True
            
            header_cells = table.find_elements(By.TAG_NAME, "th")
            if len(header_cells) > 5:
                return False
            
        except Exception:
            pass
        
        time.sleep(1)
    
    return False

def get_current_page_html(driver):
    try:
        if wait_for_table_loaded(driver):
            return driver.page_source
        else:
            return driver.page_source
    except Exception as e:
        return None

def parse_speed_data(html_content: str, sp_name: str) -> dict:
    soup = BeautifulSoup(html_content, 'html.parser')
    results = {
        'total_mean_time': "0",
        'total_deals': "0",
        'arbitrage_count': "0",
        'traders': []
    }
    
    table = soup.find('table')
    if not table:
        return results
    
    rows = table.find_all('tr')
    actual_sp_name = find_sp_in_table(soup, sp_name)
    
    total_cells = find_total_row(rows, sp_name, actual_sp_name)
    
    if total_cells and len(total_cells) >= 7:
        results['total_deals'] = total_cells[3].get_text(strip=True)
        results['total_mean_time'] = total_cells[4].get_text(strip=True)
        results['arbitrage_count'] = total_cells[5].get_text(strip=True)
    
    traders_dict = {}
    current_trader = None
    
    for row in rows:
        cells = row.find_all(['td', 'th'])
        
        if len(cells) > 1 and cells[0].get_text(strip=True) == "" and "Total (" in cells[1].get_text():
            trader_name = cells[1].get_text(strip=True).replace("Total (", "").replace(")", "")
            
            if trader_name not in traders_dict:
                traders_dict[trader_name] = {
                    'name': trader_name,
                    'sell_time': "0",
                    'buy_time': "0", 
                    'total_deals': cells[3].get_text(strip=True) if len(cells) > 3 else "0"
                }
            current_trader = trader_name
        
        elif current_trader and len(cells) >= 7:
            op_type = cells[2].get_text(strip=True)
            if op_type == 'Sell':
                traders_dict[current_trader]['sell_time'] = cells[4].get_text(strip=True)
            elif op_type == 'Buy':
                traders_dict[current_trader]['buy_time'] = cells[4].get_text(strip=True)
    
    results['traders'] = list(traders_dict.values())
    
    return results

def parse_ads_data(html_content: str) -> dict:
    soup = BeautifulSoup(html_content, 'html.parser')
    results = {
        'sell_methods': set(),
        'buy_methods': set(),
        'sell_count': 0,
        'buy_count': 0,
        'ads_count': 0,
        'is_active': True
    }
    
    table = soup.find('table')
    if not table:
        results['is_active'] = False
        return results
    
    rows = table.find_all('tr')[1:]
    
    if len(rows) == 0:
        results['is_active'] = False
        return results
    
    for row in rows:
        cells = row.find_all('td')
        if len(cells) >= 10:
            op_type = cells[9].get_text(strip=True)
            payment_method = cells[7].get_text(strip=True)
            
            if op_type == 'Sell':
                results['sell_methods'].add(payment_method)
                results['sell_count'] += 1
            elif op_type == 'Buy':
                results['buy_methods'].add(payment_method)
                results['buy_count'] += 1
            
            results['ads_count'] += 1
    
    if results['ads_count'] == 0:
        results['is_active'] = False
    
    results['sell_methods'] = list(results['sell_methods'])
    results['buy_methods'] = list(results['buy_methods'])
    
    return results

def parse_conversion_data(html_content: str, sp_name: str) -> dict:
    soup = BeautifulSoup(html_content, 'html.parser')
    results = {
        'conversion_percent': "0",
        'paid_count': "0",
        'cancelled_count': "0",
        'total_count': "0"
    }
    
    table = soup.find('table')
    if not table:
        return results
    
    rows = table.find_all('tr')
    actual_sp_name = find_sp_in_table(soup, sp_name)
    
    total_cells = find_total_row(rows, sp_name, actual_sp_name)
    
    if total_cells and len(total_cells) >= 10:
        results['paid_count'] = total_cells[4].get_text(strip=True)
        results['cancelled_count'] = total_cells[5].get_text(strip=True)
        results['total_count'] = total_cells[6].get_text(strip=True)
        results['conversion_percent'] = total_cells[9].get_text(strip=True)
    
    return results

def parse_arbitrage_data(html_content: str) -> dict:
    soup = BeautifulSoup(html_content, 'html.parser')
    results = {
        'arbitrage_count': 0,
        'arbitrage_deals': []
    }
    
    table = soup.find('table')
    if not table:
        return results
    
    rows = table.find_all('tr')[1:]
    
    if len(rows) == 0:
        return results
    
    arbitrage_rows = table.find_all('tr', class_='deal-disputed')
    
    for row in arbitrage_rows:
        cells = row.find_all('td')
        
        if len(cells) >= 10:
            deal_data = create_deal_data(cells)
            results['arbitrage_deals'].append(deal_data)
            results['arbitrage_count'] += 1
    
    if results['arbitrage_count'] == 0:
        all_rows = table.find_all('tr')[1:]
        
        for row in all_rows:
            cells = row.find_all('td')
            if len(cells) > 15:
                status = cells[15].get_text(strip=True)
                if 'arbitration' in status.lower():
                    deal_data = create_deal_data(cells)
                    results['arbitrage_deals'].append(deal_data)
                    results['arbitrage_count'] += 1
    
    return results

def parse_bank_statements_data(html_content: str) -> dict:
    soup = BeautifulSoup(html_content, 'html.parser')
    results = {
        'trader_dates': {},
        'latest_overall': None
    }
    
    table = soup.find('table')
    if not table:
        return results
    
    rows = table.find_all('tr')[1:]
    
    for row in rows:
        cells = row.find_all('td')
        if len(cells) >= 10:
            trader = cells[3].get_text(strip=True)
            date_str = cells[9].get_text(strip=True)
            
            try:
                date_only = date_str.split(' ')[0]
                date_obj = datetime.datetime.strptime(date_only, "%d.%m.%Y").date()
                
                if trader not in results['trader_dates'] or date_obj > results['trader_dates'][trader]:
                    results['trader_dates'][trader] = date_obj
                    
                if not results['latest_overall'] or date_obj > results['latest_overall']:
                    results['latest_overall'] = date_obj
                    
            except (ValueError, IndexError):
                continue
    
    return results

def format_bank_statements_info(bank_data: dict) -> str:
    if not bank_data['trader_dates']:
        return "–í—ã–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    sorted_traders = sorted(bank_data['trader_dates'].items(), key=lambda x: x[1], reverse=True)
    
    formatted = []
    for trader, date in sorted_traders:
        date_str = date.strftime("%d.%m.%Y")
        formatted.append(f"{trader} - {date_str}")
    
    return ", ".join(formatted)

def generate_report(sp_name: str, speed_data: dict, ads_data: dict, conversion_data: dict, arbitrage_data: dict, bank_data: dict, auto_no_incidents: bool) -> str:
    report = []
    
    report.append(f"–û—Ç—á–µ—Ç –ø–æ –°–ü: {sp_name}")
    report.append("=" * 50)
    
    report.append(f"1. –°–∫–æ—Ä–æ—Å—Ç—å:")
    report.append(f"- –û–±—â–∞—è: {speed_data['total_mean_time']} –º–∏–Ω. ({speed_data['total_deals']} —Å–¥–µ–ª–æ–∫)")
    
    for trader in speed_data['traders']:
        report.append(f"- {trader['name']}: sell {trader['sell_time']}, buy {trader['buy_time']} ({trader['total_deals']} —Å–¥–µ–ª–æ–∫)")
    
    if not ads_data.get('is_active', True):
        report.append("2. **–°–ü –ù–ï –ê–ö–¢–ò–í–ï–ù**")
    else:
        sell_methods = ", ".join(ads_data['sell_methods']) if ads_data['sell_methods'] else "-"
        buy_methods = ", ".join(ads_data['buy_methods']) if ads_data['buy_methods'] else "-"
        report.append(f"2. –ê–∫—Ç–∏–≤–Ω—ã:\nSell - {sell_methods}\nBuy - {buy_methods}")
    
    conversion_value = conversion_data['conversion_percent']
    if conversion_value.endswith('%'):
        conversion_value = conversion_value[:-1]
    report.append(f"3. –ö–æ–Ω–≤–µ—Ä—Å–∏—è {conversion_value}%.")
    
    report.append("4. -")
    
    arbitrage_details = []
    for deal in arbitrage_data['arbitrage_deals']:
        arbitrage_details.append(f"ID {deal['id']} (Invoice {deal['invoice']})")
    
    if arbitrage_details:
        report.append(f"5. –ê—Ä–±–∏—Ç—Ä–∞–∂–∏ - {arbitrage_data['arbitrage_count']} —à—Ç.\n   " + "\n   ".join(arbitrage_details))
    else:
        report.append(f"5. –ê—Ä–±–∏—Ç—Ä–∞–∂–∏ - {arbitrage_data['arbitrage_count']} —à—Ç.")
    
    if auto_no_incidents:
        report.append("6. –ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        report.append("6. -")
    
    if not ads_data.get('is_active', True):
        report.append("7. **–°–ü –ù–ï –ê–ö–¢–ò–í–ï–ù**")
    else:
        has_sell = ads_data['sell_count'] > 0
        has_buy = ads_data['buy_count'] > 0
        
        if has_sell and has_buy:
            status = "sell –∏ buy"
        elif has_sell:
            status = "sell"
        elif has_buy:
            status = "buy"
        else:
            status = "–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        
        report.append(f"7. –°–ü –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞ {status}, {ads_data['ads_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    bank_info = format_bank_statements_info(bank_data)
    report.append(f"8. {bank_info}")
    
    return "\n".join(report)

def save_report_to_txt(sp_name: str, report: str):
    safe_name = "".join(c for c in sp_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    filename = f"{safe_name}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report)
    
    return filename

def process_single_sp_gui(driver, sp_id: int, sp_name: str, time_params: dict, log_func, auto_no_incidents: bool):
    log_func(f"üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {sp_name} (ID {sp_id})")
    
    speed_url = build_speed_url(time_params, [sp_id])
    log_func(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏: {speed_url}")
    
    log_func("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∫–æ—Ä–æ—Å—Ç–∏...")
    driver.get(speed_url)

    speed_html = get_current_page_html(driver)
    speed_data = {}
    
    if speed_html:
        speed_data = parse_speed_data(speed_html, sp_name)
        log_func(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã: {speed_data['total_deals']} —Å–¥–µ–ª–æ–∫, –≤—Ä–µ–º—è: {speed_data['total_mean_time']} –º–∏–Ω.")
        log_func(f"üë• –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {len(speed_data['traders'])}")
    else:
        log_func("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏")
        speed_data = {'total_mean_time': '0', 'total_deals': '0', 'arbitrage_count': '0', 'traders': []}
    
    ads_url = build_ads_url(sp_id)
    log_func(f"üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {ads_url}")
    
    log_func("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    driver.get(ads_url)

    ads_html = get_current_page_html(driver)
    ads_data = {}

    if ads_html:
        ads_data = parse_ads_data(ads_html)
        if not ads_data['is_active']:
            log_func("‚ùå –°–ü –ù–ï –ê–ö–¢–ò–í–ï–ù - –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            log_func(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω—ã: {ads_data['ads_count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            log_func(f"üìä Sell –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {ads_data['sell_count']}, Buy –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {ads_data['buy_count']}")
    else:
        log_func("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        ads_data = {
            'sell_methods': [], 
            'buy_methods': [], 
            'sell_count': 0, 
            'buy_count': 0, 
            'ads_count': 0,
            'is_active': False
        }
    
    conversion_url = build_conversion_url(time_params, [sp_id])
    log_func(f"üìà –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {conversion_url}")
    
    log_func("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω–≤–µ—Ä—Å–∏–∏...")
    driver.get(conversion_url)

    conversion_html = get_current_page_html(driver)
    conversion_data = {}
    
    if conversion_html:
        conversion_data = parse_conversion_data(conversion_html, sp_name)
        log_func(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {conversion_data['conversion_percent']}%")
    else:
        log_func("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
        conversion_data = {'conversion_percent': '0', 'paid_count': '0', 'cancelled_count': '0', 'total_count': '0'}
    
    arbitrage_url = build_arbitrage_url(time_params, sp_id)
    log_func(f"‚öñÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π: {arbitrage_url}")
    
    log_func("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π...")
    driver.get(arbitrage_url)

    arbitrage_html = get_current_page_html(driver)
    arbitrage_data = {}
    
    if arbitrage_html:
        arbitrage_data = parse_arbitrage_data(arbitrage_html)
        log_func(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –ø–æ–ª—É—á–µ–Ω—ã: {arbitrage_data['arbitrage_count']} —Å–¥–µ–ª–æ–∫")
    else:
        log_func("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π")
        arbitrage_data = {'arbitrage_count': 0, 'arbitrage_deals': []}
    
    bank_statements_url = build_bank_statements_url(sp_id)
    log_func(f"üè¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤—ã–ø–∏—Å–æ–∫: {bank_statements_url}")
    
    log_func("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤—ã–ø–∏—Å–æ–∫...")
    driver.get(bank_statements_url)

    bank_html = get_current_page_html(driver)
    bank_data = {}
    
    if bank_html:
        bank_data = parse_bank_statements_data(bank_html)
        bank_info = format_bank_statements_info(bank_data)
        log_func(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω—ã: {len(bank_data['trader_dates'])} —Ç—Ä–µ–π–¥–µ—Ä–æ–≤")
        log_func(f"üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–∏—Å–∫–∞—Ö: {bank_info}")
    else:
        log_func("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤—ã–ø–∏—Å–æ–∫")
        bank_data = {'trader_dates': {}, 'latest_overall': None}
    
    report = generate_report(sp_name, speed_data, ads_data, conversion_data, arbitrage_data, bank_data, auto_no_incidents)
    filename = save_report_to_txt(sp_name, report)
    
    log_func(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
    
    return filename

def main():
    root = tk.Tk()
    app = PayportApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()